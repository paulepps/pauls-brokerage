{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/AccountComponents/Account/Account.js","components/OwnerComponents/OwnersAccounts/OwnersAccounts.js","containers/Owner/OwnerDetails/OwnerDetails.js"],"names":["closeErrorModal","type","actionTypes","handleHTTPError","error","props","response","status","execute404Handler","execute500Handler","executeOtherErrorHandler","instance","axios","create","baseURL","headers","headerType","getData","url","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","Account","account","accountType","format","dateCreated","bsStyle","onClick","id","history","push","OwnersAccounts","accounts","map","key","ownerId","mdOffset","md","to","responsive","striped","OwnerDetails","useDispatch","useEffect","match","params","repositoryActions","owner","useSelector","state","repository","name","dateOfBirth","length","className","renderTypeOfUserConditionally"],"mappings":"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","file":"static/js/12.927b5d9a.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:8080',\r\n    baseURL: 'https://brokerage.herokuapp.com',\r\n    headers: {\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\nimport axios from '../../axios/axios';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            dispatch(postDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nexport const closeSuccessModal = (props, url) => {\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst redirectToUpdateAccount = (id, history) => {\r\n    history.push('/updateAccount/' + id);\r\n}\r\n\r\nconst redirectToDeleteAccount = (id, history) => {\r\n    history.push('/deleteAccount/' + id);\r\n}\r\n\r\nconst Account = (props) => {\r\n    return (\r\n        <tr>\r\n            <td>{props.account.accountType}</td>\r\n            <td><Moment format=\"MM/DD/YYYY\">{props.account.dateCreated}</Moment></td>\r\n            <td>\r\n                <Button bsStyle=\"success\" onClick={() => redirectToUpdateAccount(props.account.id, props.history)}>Update</Button>\r\n            </td>\r\n            <td>\r\n                <Button bsStyle=\"danger\" onClick={() => redirectToDeleteAccount(props.account.id, props.history)}>Delete</Button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Account;","import React from 'react';\r\nimport { Row, Col, Table } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport Account from '../../AccountComponents/Account/Account';\r\n\r\nconst OwnersAccounts = (props) => {\r\n    let accounts = [];\r\n    if (props.accounts) {\r\n        accounts = props.accounts.map(account => {\r\n            return (\r\n                <Account\r\n                    key={account.id}\r\n                    account={account}\r\n                    {...props}\r\n                />\r\n            );\r\n        })\r\n    }\r\n    const url = '/createAccount/' + props.ownerId;\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col mdOffset={10} md={2}>\r\n                    <Link to={url} >Create Account</Link>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n\r\n            <Row>\r\n                <Col md={12}>\r\n                    <Table responsive striped>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Account type</th>\r\n                                <th>Date created</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {accounts}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OwnersAccounts;","import React, { Fragment, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Well, Row, Col } from 'react-bootstrap';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport Moment from 'react-moment';\r\nimport OwnersAccounts from '../../../components/OwnerComponents/OwnersAccounts/OwnersAccounts';\r\n\r\nconst OwnerDetails = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let id = props.match.params.id;\r\n        let url = '/api/owner/' + id + '/account';\r\n        dispatch(repositoryActions.getData(url, { ...props }))\r\n    },[props,dispatch])\r\n\r\n    const owner = useSelector(state=> state.repository.data);\r\n\r\n    const renderTypeOfUserConditionally = (owner) => {\r\n        let typeOfUser = null;\r\n\r\n        if (owner.accounts && owner.accounts.length <= 2) {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-success'}>Beginner user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        else {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-info'}>Advanced user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n\r\n        return typeOfUser;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Well>\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Owner name:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        {owner.name}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Date of birth:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <Moment format=\"MM/DD/YYYY\">{owner.dateOfBirth}</Moment>\r\n                    </Col>\r\n                </Row>\r\n                {renderTypeOfUserConditionally(owner)}\r\n            </Well>\r\n            <OwnersAccounts accounts={owner.accounts} ownerId={props.match.params.id} { ...props }/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default OwnerDetails;"],"sourceRoot":""}